rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
colnames(stack(out)) <- c("hospital", "state")
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
?stack
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
#colnames(stack(out)) <- c("hospital", "state")
stack(out)
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
?colnames
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
out <- stack(out)
colnames(out) <- c("hospital", "state")
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
out <- stack(out)
names(out) <- c("hospital", "state")
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
out <- stack(out)
print(class(out))
out
#names(out) <- c("hospital", "state")
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
out <- stack(out)
print(class(out))
print(names(out))
out
#names(out) <- c("hospital", "state")
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
out <- stack(out)
print(class(out))
names(out) <- c("hospital", "state")
print(names(out))
out
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
#out <-
#print(class(out))
names(stack(out)) <- c("hospital", "state")
#print(names(out))
out
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
## Format the column lower mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## For each state, find the hospital of the given rank
#best_st <- outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
#data.table(outcome_data, key = c("State", req_col_name))
#aggregate(outcome_data$req_col_name, by=list(outcome_data$State),min)
#dt = data.table(outcome_data)
#dt[ , min(outcome_data[req_col_name], na.rm = TRUE), by = State]
out <- sapply(split(outcome_data,outcome_data$State),
function(outcome_by_st, num,req_col_name) {
non_na_count <- sum(!is.na(outcome_by_st[req_col_name]))
if (num=='worst'){
##best_st <- max(st_outcome[which.max(as.numeric(st_outcome[[req_col_name]])),])
num <- non_na_count
#print(num)
}
else if (num=='best'){
num <- 1
}
else if(num > non_na_count){
#best_st <- NA
return (NA)
}
ranking <- outcome_by_st[order(as.numeric(outcome_by_st[[req_col_name]]),outcome_by_st$Hospital.Name),]
#st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
ranking[num,'Hospital.Name']
},num,req_col_name)
out <- stack(out)
#print(class(out))
names(out) <- c("hospital", "state")
#print(names(out))
out
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
best("AK", "pneumonia")
setwd('C:\\Users\\Ishwa\\Desktop\\DataScience\\R\\Course_2_Assignment_3')
## Question -1
## Explore the data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
## Plot the 30-day mortality rates for heart attack
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Valid outcomes and states
valid_outcomes <- c('heart attack', 'heart failure', 'pneumonia')
valid_states <- unique(outcome_data[,7])
## Check that state and outcome are valid
if (!outcome %in% valid_outcomes){
stop('invalid outcome')
}
if (!state %in% valid_states){
stop('invalid state')
}
## Filter the data for the given state
st_outcome <- outcome_data[outcome_data$State==state,]
## Format the column Hospital mortality column name for the given outcome
if (outcome == 'heart failure'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
}
else if (outcome == 'heart attack'){
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
}
else
req_col_name <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
## Sort the lower mortality column
best_st <- st_outcome[order(as.numeric(st_outcome[[req_col_name]]),st_outcome$Hospital.Name),]
## Return hospital name in that state with lowest 30-day death rate for the given outcome
best_st[1,'Hospital.Name']
}
# Sample outputs
print(best("TX", "heart failure"))
